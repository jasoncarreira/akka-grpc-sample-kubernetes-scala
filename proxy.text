{
 "configs": [
  {
   "@type": "type.googleapis.com/envoy.admin.v2alpha.BootstrapConfigDump",
   "bootstrap": {
    "node": {
     "id": "gateway-proxy-v2-7f49db58f4-96hg2.gloo-system",
     "cluster": "gateway",
     "metadata": {
      "role": "gloo-system~gateway-proxy-v2"
     },
     "build_version": "04a6de60fc5326212f248f5652cde4f791735518/1.11.0-dev/Distribution/RELEASE/BoringSSL"
    },
    "static_resources": {
     "listeners": [
      {
       "name": "prometheus_listener",
       "address": {
        "socket_address": {
         "address": "0.0.0.0",
         "port_value": 8081
        }
       },
       "filter_chains": [
        {
         "filters": [
          {
           "name": "envoy.http_connection_manager",
           "config": {
            "route_config": {
             "virtual_hosts": [
              {
               "name": "prometheus_host",
               "routes": [
                {
                 "route": {
                  "cluster": "admin_port_cluster"
                 },
                 "match": {
                  "path": "/ready",
                  "headers": [
                   {
                    "name": ":method",
                    "exact_match": "GET"
                   }
                  ]
                 }
                },
                {
                 "match": {
                  "prefix": "/metrics",
                  "headers": [
                   {
                    "exact_match": "GET",
                    "name": ":method"
                   }
                  ]
                 },
                 "route": {
                  "prefix_rewrite": "/stats/prometheus",
                  "cluster": "admin_port_cluster"
                 }
                }
               ],
               "domains": [
                "*"
               ]
              }
             ],
             "name": "prometheus_route"
            },
            "codec_type": "auto",
            "http_filters": [
             {
              "name": "envoy.router",
              "config": {}
             }
            ],
            "stat_prefix": "prometheus"
           }
          }
         ]
        }
       ]
      }
     ],
     "clusters": [
      {
       "name": "gloo.gloo-system.svc.cluster.local:9977",
       "type": "STRICT_DNS",
       "connect_timeout": "5s",
       "http2_protocol_options": {},
       "alt_stat_name": "xds_cluster",
       "upstream_connection_options": {
        "tcp_keepalive": {}
       },
       "load_assignment": {
        "cluster_name": "gloo.gloo-system.svc.cluster.local:9977",
        "endpoints": [
         {
          "lb_endpoints": [
           {
            "endpoint": {
             "address": {
              "socket_address": {
               "address": "gloo.gloo-system.svc.cluster.local",
               "port_value": 9977
              }
             }
            }
           }
          ]
         }
        ]
       }
      },
      {
       "name": "admin_port_cluster",
       "type": "STATIC",
       "connect_timeout": "5s",
       "load_assignment": {
        "cluster_name": "admin_port_cluster",
        "endpoints": [
         {
          "lb_endpoints": [
           {
            "endpoint": {
             "address": {
              "socket_address": {
               "address": "127.0.0.1",
               "port_value": 19000
              }
             }
            }
           }
          ]
         }
        ]
       }
      }
     ]
    },
    "dynamic_resources": {
     "lds_config": {
      "ads": {}
     },
     "cds_config": {
      "ads": {}
     },
     "ads_config": {
      "api_type": "GRPC",
      "grpc_services": [
       {
        "envoy_grpc": {
         "cluster_name": "gloo.gloo-system.svc.cluster.local:9977"
        }
       }
      ]
     }
    },
    "admin": {
     "access_log_path": "/dev/null",
     "address": {
      "socket_address": {
       "address": "127.0.0.1",
       "port_value": 19000
      }
     }
    }
   },
   "last_updated": "2019-08-05T13:18:23.845Z"
  },
  {
   "@type": "type.googleapis.com/envoy.admin.v2alpha.ClustersConfigDump",
   "version_info": "17805969521978494419",
   "static_clusters": [
    {
     "cluster": {
      "name": "admin_port_cluster",
      "type": "STATIC",
      "connect_timeout": "5s",
      "load_assignment": {
       "cluster_name": "admin_port_cluster",
       "endpoints": [
        {
         "lb_endpoints": [
          {
           "endpoint": {
            "address": {
             "socket_address": {
              "address": "127.0.0.1",
              "port_value": 19000
             }
            }
           }
          }
         ]
        }
       ]
      }
     },
     "last_updated": "2019-08-05T13:18:23.848Z"
    },
    {
     "cluster": {
      "name": "gloo.gloo-system.svc.cluster.local:9977",
      "type": "STRICT_DNS",
      "connect_timeout": "5s",
      "http2_protocol_options": {},
      "alt_stat_name": "xds_cluster",
      "upstream_connection_options": {
       "tcp_keepalive": {}
      },
      "load_assignment": {
       "cluster_name": "gloo.gloo-system.svc.cluster.local:9977",
       "endpoints": [
        {
         "lb_endpoints": [
          {
           "endpoint": {
            "address": {
             "socket_address": {
              "address": "gloo.gloo-system.svc.cluster.local",
              "port_value": 9977
             }
            }
           }
          }
         ]
        }
       ]
      }
     },
     "last_updated": "2019-08-05T13:18:23.847Z"
    }
   ],
   "dynamic_active_clusters": [
    {
     "version_info": "17805969521978494419",
     "cluster": {
      "name": "default-grpcservice-8080_gloo-system",
      "type": "EDS",
      "eds_cluster_config": {
       "eds_config": {
        "ads": {}
       }
      },
      "connect_timeout": "5s",
      "http2_protocol_options": {},
      "metadata": {}
     },
     "last_updated": "2019-08-05T17:36:40.237Z"
    },
    {
     "version_info": "17805969521978494419",
     "cluster": {
      "name": "default-grpcservice-grpcservice-v0-2-0-snapshot-8080_gloo-system",
      "type": "EDS",
      "eds_cluster_config": {
       "eds_config": {
        "ads": {}
       }
      },
      "connect_timeout": "5s",
      "http2_protocol_options": {},
      "metadata": {}
     },
     "last_updated": "2019-08-05T17:36:40.250Z"
    },
    {
     "version_info": "17805969521978494419",
     "cluster": {
      "name": "default-httptogrpc-8080_gloo-system",
      "type": "EDS",
      "eds_cluster_config": {
       "eds_config": {
        "ads": {}
       }
      },
      "connect_timeout": "5s",
      "metadata": {}
     },
     "last_updated": "2019-08-05T17:36:40.241Z"
    },
    {
     "version_info": "17805969521978494419",
     "cluster": {
      "name": "default-httptogrpc-httptogrpc-v0-2-0-snapshot-8080_gloo-system",
      "type": "EDS",
      "eds_cluster_config": {
       "eds_config": {
        "ads": {}
       }
      },
      "connect_timeout": "5s",
      "metadata": {}
     },
     "last_updated": "2019-08-05T17:36:40.238Z"
    },
    {
     "version_info": "17805969521978494419",
     "cluster": {
      "name": "default-kubernetes-443_gloo-system",
      "type": "EDS",
      "eds_cluster_config": {
       "eds_config": {
        "ads": {}
       }
      },
      "connect_timeout": "5s",
      "metadata": {}
     },
     "last_updated": "2019-08-05T17:36:40.230Z"
    },
    {
     "version_info": "17805969521978494419",
     "cluster": {
      "name": "extauth_gloo-system",
      "type": "EDS",
      "eds_cluster_config": {
       "eds_config": {
        "ads": {}
       }
      },
      "connect_timeout": "5s",
      "http2_protocol_options": {},
      "metadata": {}
     },
     "last_updated": "2019-08-05T17:36:40.252Z"
    },
    {
     "version_info": "17805969521978494419",
     "cluster": {
      "name": "gloo-system-apiserver-ui-8088_gloo-system",
      "type": "EDS",
      "eds_cluster_config": {
       "eds_config": {
        "ads": {}
       }
      },
      "connect_timeout": "5s",
      "metadata": {}
     },
     "last_updated": "2019-08-05T17:36:40.243Z"
    },
    {
     "version_info": "17805969521978494419",
     "cluster": {
      "name": "gloo-system-extauth-8080_gloo-system",
      "type": "EDS",
      "eds_cluster_config": {
       "eds_config": {
        "ads": {}
       }
      },
      "connect_timeout": "5s",
      "http2_protocol_options": {},
      "metadata": {}
     },
     "last_updated": "2019-08-05T17:36:40.231Z"
    },
    {
     "version_info": "17805969521978494419",
     "cluster": {
      "name": "gloo-system-gateway-proxy-v2-443_gloo-system",
      "type": "EDS",
      "eds_cluster_config": {
       "eds_config": {
        "ads": {}
       }
      },
      "connect_timeout": "5s",
      "metadata": {}
     },
     "last_updated": "2019-08-05T17:36:40.227Z"
    },
    {
     "version_info": "17805969521978494419",
     "cluster": {
      "name": "gloo-system-gateway-proxy-v2-80_gloo-system",
      "type": "EDS",
      "eds_cluster_config": {
       "eds_config": {
        "ads": {}
       }
      },
      "connect_timeout": "5s",
      "metadata": {}
     },
     "last_updated": "2019-08-05T17:36:40.242Z"
    },
    {
     "version_info": "17805969521978494419",
     "cluster": {
      "name": "gloo-system-gateway-proxy-v2-gateway-proxy-v2-443_gloo-system",
      "type": "EDS",
      "eds_cluster_config": {
       "eds_config": {
        "ads": {}
       }
      },
      "connect_timeout": "5s",
      "metadata": {}
     },
     "last_updated": "2019-08-05T17:36:40.224Z"
    },
    {
     "version_info": "17805969521978494419",
     "cluster": {
      "name": "gloo-system-gateway-proxy-v2-gateway-proxy-v2-80_gloo-system",
      "type": "EDS",
      "eds_cluster_config": {
       "eds_config": {
        "ads": {}
       }
      },
      "connect_timeout": "5s",
      "metadata": {}
     },
     "last_updated": "2019-08-05T17:36:40.261Z"
    },
    {
     "version_info": "17805969521978494419",
     "cluster": {
      "name": "gloo-system-gloo-9977_gloo-system",
      "type": "EDS",
      "eds_cluster_config": {
       "eds_config": {
        "ads": {}
       }
      },
      "connect_timeout": "5s",
      "http2_protocol_options": {},
      "metadata": {}
     },
     "last_updated": "2019-08-05T17:36:40.244Z"
    },
    {
     "version_info": "17805969521978494419",
     "cluster": {
      "name": "gloo-system-glooe-grafana-80_gloo-system",
      "type": "EDS",
      "eds_cluster_config": {
       "eds_config": {
        "ads": {}
       }
      },
      "connect_timeout": "5s",
      "metadata": {}
     },
     "last_updated": "2019-08-05T17:36:40.245Z"
    },
    {
     "version_info": "17805969521978494419",
     "cluster": {
      "name": "gloo-system-glooe-prometheus-ku-e95ea267dd395e5c7111d7dff3d2dd3_gloo-system",
      "type": "EDS",
      "eds_cluster_config": {
       "eds_config": {
        "ads": {}
       }
      },
      "connect_timeout": "5s",
      "metadata": {}
     },
     "last_updated": "2019-08-05T17:36:40.253Z"
    },
    {
     "version_info": "17805969521978494419",
     "cluster": {
      "name": "gloo-system-glooe-prometheus-kube-state-metrics-80_gloo-system",
      "type": "EDS",
      "eds_cluster_config": {
       "eds_config": {
        "ads": {}
       }
      },
      "connect_timeout": "5s",
      "metadata": {}
     },
     "last_updated": "2019-08-05T17:36:40.246Z"
    },
    {
     "version_info": "17805969521978494419",
     "cluster": {
      "name": "gloo-system-glooe-prometheus-server-80_gloo-system",
      "type": "EDS",
      "eds_cluster_config": {
       "eds_config": {
        "ads": {}
       }
      },
      "connect_timeout": "5s",
      "metadata": {}
     },
     "last_updated": "2019-08-05T17:36:40.247Z"
    },
    {
     "version_info": "17805969521978494419",
     "cluster": {
      "name": "gloo-system-glooe-prometheus-server-prometheus-8-4-1-tiller-80_gloo-system",
      "type": "EDS",
      "eds_cluster_config": {
       "eds_config": {
        "ads": {}
       }
      },
      "connect_timeout": "5s",
      "metadata": {}
     },
     "last_updated": "2019-08-05T17:36:40.226Z"
    },
    {
     "version_info": "17805969521978494419",
     "cluster": {
      "name": "gloo-system-rate-limit-18081_gloo-system",
      "type": "EDS",
      "eds_cluster_config": {
       "eds_config": {
        "ads": {}
       }
      },
      "connect_timeout": "5s",
      "http2_protocol_options": {},
      "metadata": {}
     },
     "last_updated": "2019-08-05T17:36:40.239Z"
    },
    {
     "version_info": "17805969521978494419",
     "cluster": {
      "name": "gloo-system-redis-6379_gloo-system",
      "type": "EDS",
      "eds_cluster_config": {
       "eds_config": {
        "ads": {}
       }
      },
      "connect_timeout": "5s",
      "metadata": {}
     },
     "last_updated": "2019-08-05T17:36:40.219Z"
    },
    {
     "version_info": "17805969521978494419",
     "cluster": {
      "name": "kube-svc:default-grpcservice-8080_default",
      "type": "EDS",
      "eds_cluster_config": {
       "eds_config": {
        "ads": {}
       }
      },
      "connect_timeout": "5s",
      "metadata": {}
     },
     "last_updated": "2019-08-05T17:36:40.257Z"
    },
    {
     "version_info": "17805969521978494419",
     "cluster": {
      "name": "kube-svc:default-httptogrpc-8080_default",
      "type": "EDS",
      "eds_cluster_config": {
       "eds_config": {
        "ads": {}
       }
      },
      "connect_timeout": "5s",
      "metadata": {}
     },
     "last_updated": "2019-08-05T17:36:40.258Z"
    },
    {
     "version_info": "17805969521978494419",
     "cluster": {
      "name": "kube-svc:default-kubernetes-443_default",
      "type": "EDS",
      "eds_cluster_config": {
       "eds_config": {
        "ads": {}
       }
      },
      "connect_timeout": "5s",
      "metadata": {}
     },
     "last_updated": "2019-08-05T17:36:40.249Z"
    },
    {
     "version_info": "17805969521978494419",
     "cluster": {
      "name": "kube-svc:gloo-system-apiserver-ui-8088_gloo-system",
      "type": "EDS",
      "eds_cluster_config": {
       "eds_config": {
        "ads": {}
       }
      },
      "connect_timeout": "5s",
      "metadata": {}
     },
     "last_updated": "2019-08-05T17:36:40.221Z"
    },
    {
     "version_info": "17805969521978494419",
     "cluster": {
      "name": "kube-svc:gloo-system-extauth-8080_gloo-system",
      "type": "EDS",
      "eds_cluster_config": {
       "eds_config": {
        "ads": {}
       }
      },
      "connect_timeout": "5s",
      "http2_protocol_options": {},
      "metadata": {}
     },
     "last_updated": "2019-08-05T17:36:40.240Z"
    },
    {
     "version_info": "17805969521978494419",
     "cluster": {
      "name": "kube-svc:gloo-system-gateway-proxy-v2-443_gloo-system",
      "type": "EDS",
      "eds_cluster_config": {
       "eds_config": {
        "ads": {}
       }
      },
      "connect_timeout": "5s",
      "metadata": {}
     },
     "last_updated": "2019-08-05T17:36:40.232Z"
    },
    {
     "version_info": "17805969521978494419",
     "cluster": {
      "name": "kube-svc:gloo-system-gateway-proxy-v2-80_gloo-system",
      "type": "EDS",
      "eds_cluster_config": {
       "eds_config": {
        "ads": {}
       }
      },
      "connect_timeout": "5s",
      "metadata": {}
     },
     "last_updated": "2019-08-05T17:36:40.233Z"
    },
    {
     "version_info": "17805969521978494419",
     "cluster": {
      "name": "kube-svc:gloo-system-gloo-9977_gloo-system",
      "type": "EDS",
      "eds_cluster_config": {
       "eds_config": {
        "ads": {}
       }
      },
      "connect_timeout": "5s",
      "http2_protocol_options": {},
      "metadata": {}
     },
     "last_updated": "2019-08-05T17:36:40.234Z"
    },
    {
     "version_info": "17805969521978494419",
     "cluster": {
      "name": "kube-svc:gloo-system-glooe-grafana-80_gloo-system",
      "type": "EDS",
      "eds_cluster_config": {
       "eds_config": {
        "ads": {}
       }
      },
      "connect_timeout": "5s",
      "metadata": {}
     },
     "last_updated": "2019-08-05T17:36:40.248Z"
    },
    {
     "version_info": "17805969521978494419",
     "cluster": {
      "name": "kube-svc:gloo-system-glooe-prometheus-kube-state-metrics-80_gloo-system",
      "type": "EDS",
      "eds_cluster_config": {
       "eds_config": {
        "ads": {}
       }
      },
      "connect_timeout": "5s",
      "metadata": {}
     },
     "last_updated": "2019-08-05T17:36:40.235Z"
    },
    {
     "version_info": "17805969521978494419",
     "cluster": {
      "name": "kube-svc:gloo-system-glooe-prometheus-server-80_gloo-system",
      "type": "EDS",
      "eds_cluster_config": {
       "eds_config": {
        "ads": {}
       }
      },
      "connect_timeout": "5s",
      "metadata": {}
     },
     "last_updated": "2019-08-05T17:36:40.262Z"
    },
    {
     "version_info": "17805969521978494419",
     "cluster": {
      "name": "kube-svc:gloo-system-rate-limit-18081_gloo-system",
      "type": "EDS",
      "eds_cluster_config": {
       "eds_config": {
        "ads": {}
       }
      },
      "connect_timeout": "5s",
      "http2_protocol_options": {},
      "metadata": {}
     },
     "last_updated": "2019-08-05T17:36:40.254Z"
    },
    {
     "version_info": "17805969521978494419",
     "cluster": {
      "name": "kube-svc:gloo-system-redis-6379_gloo-system",
      "type": "EDS",
      "eds_cluster_config": {
       "eds_config": {
        "ads": {}
       }
      },
      "connect_timeout": "5s",
      "metadata": {}
     },
     "last_updated": "2019-08-05T17:36:40.228Z"
    },
    {
     "version_info": "17805969521978494419",
     "cluster": {
      "name": "kube-svc:kube-system-kube-dns-53_kube-system",
      "type": "EDS",
      "eds_cluster_config": {
       "eds_config": {
        "ads": {}
       }
      },
      "connect_timeout": "5s",
      "metadata": {}
     },
     "last_updated": "2019-08-05T17:36:40.251Z"
    },
    {
     "version_info": "17805969521978494419",
     "cluster": {
      "name": "kube-svc:kube-system-kube-dns-9153_kube-system",
      "type": "EDS",
      "eds_cluster_config": {
       "eds_config": {
        "ads": {}
       }
      },
      "connect_timeout": "5s",
      "metadata": {}
     },
     "last_updated": "2019-08-05T17:36:40.251Z"
    },
    {
     "version_info": "17805969521978494419",
     "cluster": {
      "name": "kube-svc:kube-system-kubernetes-dashboard-80_kube-system",
      "type": "EDS",
      "eds_cluster_config": {
       "eds_config": {
        "ads": {}
       }
      },
      "connect_timeout": "5s",
      "metadata": {}
     },
     "last_updated": "2019-08-05T17:36:40.229Z"
    },
    {
     "version_info": "17805969521978494419",
     "cluster": {
      "name": "kube-system-kube-dns-53_gloo-system",
      "type": "EDS",
      "eds_cluster_config": {
       "eds_config": {
        "ads": {}
       }
      },
      "connect_timeout": "5s",
      "metadata": {}
     },
     "last_updated": "2019-08-05T17:36:40.255Z"
    },
    {
     "version_info": "17805969521978494419",
     "cluster": {
      "name": "kube-system-kube-dns-9153_gloo-system",
      "type": "EDS",
      "eds_cluster_config": {
       "eds_config": {
        "ads": {}
       }
      },
      "connect_timeout": "5s",
      "metadata": {}
     },
     "last_updated": "2019-08-05T17:36:40.256Z"
    },
    {
     "version_info": "17805969521978494419",
     "cluster": {
      "name": "kube-system-kubernetes-dashboard-80_gloo-system",
      "type": "EDS",
      "eds_cluster_config": {
       "eds_config": {
        "ads": {}
       }
      },
      "connect_timeout": "5s",
      "metadata": {}
     },
     "last_updated": "2019-08-05T17:36:40.222Z"
    },
    {
     "version_info": "17805969521978494419",
     "cluster": {
      "name": "kube-system-kubernetes-dashboard-reconcile-v1-10-1-80_gloo-system",
      "type": "EDS",
      "eds_cluster_config": {
       "eds_config": {
        "ads": {}
       }
      },
      "connect_timeout": "5s",
      "metadata": {}
     },
     "last_updated": "2019-08-05T17:36:40.260Z"
    },
    {
     "version_info": "17805969521978494419",
     "cluster": {
      "name": "rate-limit_gloo-system",
      "type": "EDS",
      "eds_cluster_config": {
       "eds_config": {
        "ads": {}
       }
      },
      "connect_timeout": "5s",
      "http2_protocol_options": {},
      "metadata": {}
     },
     "last_updated": "2019-08-05T17:36:40.236Z"
    }
   ]
  },
  {
   "@type": "type.googleapis.com/envoy.admin.v2alpha.ListenersConfigDump",
   "version_info": "10111358203696211959",
   "static_listeners": [
    {
     "listener": {
      "name": "prometheus_listener",
      "address": {
       "socket_address": {
        "address": "0.0.0.0",
        "port_value": 8081
       }
      },
      "filter_chains": [
       {
        "filters": [
         {
          "name": "envoy.http_connection_manager",
          "config": {
           "codec_type": "auto",
           "http_filters": [
            {
             "name": "envoy.router",
             "config": {}
            }
           ],
           "stat_prefix": "prometheus",
           "route_config": {
            "name": "prometheus_route",
            "virtual_hosts": [
             {
              "name": "prometheus_host",
              "routes": [
               {
                "route": {
                 "cluster": "admin_port_cluster"
                },
                "match": {
                 "headers": [
                  {
                   "name": ":method",
                   "exact_match": "GET"
                  }
                 ],
                 "path": "/ready"
                }
               },
               {
                "route": {
                 "cluster": "admin_port_cluster",
                 "prefix_rewrite": "/stats/prometheus"
                },
                "match": {
                 "headers": [
                  {
                   "exact_match": "GET",
                   "name": ":method"
                  }
                 ],
                 "prefix": "/metrics"
                }
               }
              ],
              "domains": [
               "*"
              ]
             }
            ]
           }
          }
         }
        ]
       }
      ]
     },
     "last_updated": "2019-08-05T13:18:23.852Z"
    }
   ],
   "dynamic_active_listeners": [
    {
     "version_info": "10111358203696211959",
     "listener": {
      "name": "listener-::-8080",
      "address": {
       "socket_address": {
        "address": "::",
        "port_value": 8080,
        "ipv4_compat": true
       }
      },
      "filter_chains": [
       {
        "filters": [
         {
          "name": "envoy.http_connection_manager",
          "config": {
           "http_filters": [
            {
             "name": "envoy.fault"
            },
            {
             "name": "io.solo.filters.http.sanitize",
             "config": {
              "headersToRemove": [
               "x-user-id"
              ]
             }
            },
            {
             "name": "envoy.ext_authz",
             "config": {
              "grpcService": {
               "timeout": "0.200s",
               "envoyGrpc": {
                "clusterName": "extauth_gloo-system"
               }
              }
             }
            },
            {
             "config": {
              "filterStateRules": {
               "requires": {},
               "name": "filterState"
              },
              "providers": {}
             },
             "name": "io.solo.filters.http.solo_jwt_authn"
            },
            {
             "name": "envoy.cors"
            },
            {
             "name": "envoy.filters.http.rbac"
            },
            {
             "config": {
              "requestType": "both",
              "rateLimitService": {
               "grpcService": {
                "envoyGrpc": {
                 "clusterName": "rate-limit_gloo-system"
                }
               }
              },
              "domain": "custom",
              "stage": 1,
              "timeout": "0.100s"
             },
             "name": "envoy.rate_limit"
            },
            {
             "name": "envoy.rate_limit",
             "config": {
              "requestType": "both",
              "rateLimitService": {
               "grpcService": {
                "envoyGrpc": {
                 "clusterName": "rate-limit_gloo-system"
                }
               }
              },
              "domain": "ingress",
              "timeout": "0.100s"
             }
            },
            {
             "name": "io.solo.transformation"
            },
            {
             "name": "envoy.grpc_json_transcoder",
             "config": {
              "services": [
               "helloworld.GreeterService"
              ],
              "matchIncomingRequestRoute": true,
              "protoDescriptorBin": ""
             }
            },
            {
             "name": "envoy.grpc_json_transcoder",
             "config": {
              "protoDescriptorBin": "",
              "services": [
               "helloworld.GreeterService"
              ],
              "matchIncomingRequestRoute": true
             }
            },
            {
             "name": "envoy.router"
            }
           ],
           "rds": {
            "route_config_name": "listener-::-8080-routes",
            "config_source": {
             "ads": {}
            }
           },
           "stat_prefix": "http",
           "normalize_path": true,
           "upgrade_configs": [
            {
             "upgrade_type": "websocket"
            }
           ]
          }
         }
        ],
        "use_proxy_proto": false
       }
      ]
     },
     "last_updated": "2019-08-05T17:36:40.288Z"
    }
   ]
  },
  {
   "@type": "type.googleapis.com/envoy.admin.v2alpha.RoutesConfigDump",
   "static_route_configs": [
    {
     "route_config": {
      "name": "prometheus_route",
      "virtual_hosts": [
       {
        "name": "prometheus_host",
        "domains": [
         "*"
        ],
        "routes": [
         {
          "match": {
           "path": "/ready",
           "headers": [
            {
             "name": ":method",
             "exact_match": "GET"
            }
           ]
          },
          "route": {
           "cluster": "admin_port_cluster"
          }
         },
         {
          "match": {
           "prefix": "/metrics",
           "headers": [
            {
             "name": ":method",
             "exact_match": "GET"
            }
           ]
          },
          "route": {
           "cluster": "admin_port_cluster",
           "prefix_rewrite": "/stats/prometheus"
          }
         }
        ]
       }
      ]
     },
     "last_updated": "2019-08-05T13:18:23.852Z"
    }
   ],
   "dynamic_route_configs": [
    {
     "version_info": "8493774779474181786",
     "route_config": {
      "name": "listener-::-8080-routes",
      "virtual_hosts": [
       {
        "name": "gloo-system_default",
        "domains": [
         "*"
        ],
        "routes": [
         {
          "match": {
           "path": "/helloHttp"
          },
          "route": {
           "cluster": "default-httptogrpc-8080_gloo-system",
           "prefix_rewrite": "/hello"
          }
         }
        ],
        "per_filter_config": {
         "envoy.ext_authz": {
          "disabled": true
         }
        }
       }
      ]
     },
     "last_updated": "2019-08-05T17:36:40.291Z"
    }
   ]
  }
 ]
}
